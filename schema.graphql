# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Query {
    game(filter: game_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [game!]!
    game_aggregated(filter: game_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [game_aggregated!]!
    game_by_id(id: ID!): game
    game_translations(filter: game_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [game_translations!]!
    game_translations_aggregated(filter: game_translations_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [game_translations_aggregated!]!
    game_translations_by_id(id: ID!): game_translations
    languages(filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [languages!]!
    languages_aggregated(filter: languages_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [languages_aggregated!]!
    languages_by_id(id: ID!): languages
    page(filter: page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page!]!
    page_aggregated(filter: page_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [page_aggregated!]!
    page_by_id(id: ID!): page
    page_translations(filter: page_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_translations!]!
    page_translations_aggregated(filter: page_translations_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [page_translations_aggregated!]!
    page_translations_by_id(id: ID!): page_translations
}

type count_functions {
    count: Int
}

type datetime_functions {
    day: Int
    hour: Int
    minute: Int
    month: Int
    second: Int
    week: Int
    weekday: Int
    year: Int
}

type game {
    category: Int
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    gameID: String
    game_translations(filter: game_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [game_translations]
    game_translations_func: count_functions
    header_image: String
    id: ID!
    name: String
    provider: Int
    release_date: Date
    release_date_func: datetime_functions
    slug: String
    sort: Int
    status: String
    user_created: String
    user_updated: String
}

type game_aggregated {
    avg: game_aggregated_fields
    avgDistinct: game_aggregated_fields
    count: game_aggregated_count
    countAll: Int
    countDistinct: game_aggregated_count
    group: JSON
    max: game_aggregated_fields
    min: game_aggregated_fields
    sum: game_aggregated_fields
    sumDistinct: game_aggregated_fields
}

type game_aggregated_count {
    category: Int
    date_created: Int
    date_updated: Int
    gameID: Int
    game_translations: Int
    header_image: Int
    id: Int
    name: Int
    provider: Int
    release_date: Int
    slug: Int
    sort: Int
    status: Int
    user_created: Int
    user_updated: Int
}

type game_aggregated_fields {
    category: Float
    id: Float
    provider: Float
    sort: Float
}

type game_translations {
    body: String
    body_html: String
    game_id(filter: game_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): game
    id: ID!
    languages_code(filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): languages
    tags: JSON
    tags_func: count_functions
    thumbnail: String
    title: String
}

type game_translations_aggregated {
    avg: game_translations_aggregated_fields
    avgDistinct: game_translations_aggregated_fields
    count: game_translations_aggregated_count
    countAll: Int
    countDistinct: game_translations_aggregated_count
    group: JSON
    max: game_translations_aggregated_fields
    min: game_translations_aggregated_fields
    sum: game_translations_aggregated_fields
    sumDistinct: game_translations_aggregated_fields
}

type game_translations_aggregated_count {
    body: Int
    body_html: Int
    game_id: Int
    id: Int
    languages_code: Int
    tags: Int
    thumbnail: Int
    title: Int
}

type game_translations_aggregated_fields {
    game_id: Float
    id: Float
}

type languages {
    body: String
    code: ID!
    direction: String
    name: String
    title: String
}

type languages_aggregated {
    count: languages_aggregated_count
    countAll: Int
    countDistinct: languages_aggregated_count
    group: JSON
}

type languages_aggregated_count {
    body: Int
    code: Int
    direction: Int
    name: Int
    title: Int
}

type page {
    Name: String
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    id: ID!
    page_translations(filter: page_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_translations]
    page_translations_func: count_functions
    sort: Int
    status: String
    user_created: String
    user_updated: String
}

type page_aggregated {
    avg: page_aggregated_fields
    avgDistinct: page_aggregated_fields
    count: page_aggregated_count
    countAll: Int
    countDistinct: page_aggregated_count
    group: JSON
    max: page_aggregated_fields
    min: page_aggregated_fields
    sum: page_aggregated_fields
    sumDistinct: page_aggregated_fields
}

type page_aggregated_count {
    Name: Int
    date_created: Int
    date_updated: Int
    id: Int
    page_translations: Int
    sort: Int
    status: Int
    user_created: Int
    user_updated: Int
}

type page_aggregated_fields {
    id: Float
    sort: Float
}

type page_translations {
    Title: String
    body: String
    header_image: String
    id: ID!
    languages_id(filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): languages
    page_id(filter: page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): page
    slug: String
}

type page_translations_aggregated {
    avg: page_translations_aggregated_fields
    avgDistinct: page_translations_aggregated_fields
    count: page_translations_aggregated_count
    countAll: Int
    countDistinct: page_translations_aggregated_count
    group: JSON
    max: page_translations_aggregated_fields
    min: page_translations_aggregated_fields
    sum: page_translations_aggregated_fields
    sumDistinct: page_translations_aggregated_fields
}

type page_translations_aggregated_count {
    Title: Int
    body: Int
    header_image: Int
    id: Int
    languages_id: Int
    page_id: Int
    slug: Int
}

type page_translations_aggregated_fields {
    id: Float
    page_id: Float
}

"ISO8601 Date values"
scalar Date

"A Float or a String"
scalar GraphQLStringOrFloat

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input count_function_filter_operators {
    count: number_filter_operators
}

input date_filter_operators {
    _between: [GraphQLStringOrFloat]
    _eq: String
    _gt: String
    _gte: String
    _in: [String]
    _lt: String
    _lte: String
    _nbetween: [GraphQLStringOrFloat]
    _neq: String
    _nin: [String]
    _nnull: Boolean
    _null: Boolean
}

input datetime_function_filter_operators {
    day: number_filter_operators
    hour: number_filter_operators
    minute: number_filter_operators
    month: number_filter_operators
    second: number_filter_operators
    week: number_filter_operators
    weekday: number_filter_operators
    year: number_filter_operators
}

input game_filter {
    _and: [game_filter]
    _or: [game_filter]
    category: number_filter_operators
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    gameID: string_filter_operators
    game_translations: game_translations_filter
    game_translations_func: count_function_filter_operators
    header_image: string_filter_operators
    id: number_filter_operators
    name: string_filter_operators
    provider: number_filter_operators
    release_date: date_filter_operators
    release_date_func: datetime_function_filter_operators
    slug: string_filter_operators
    sort: number_filter_operators
    status: string_filter_operators
    user_created: string_filter_operators
    user_updated: string_filter_operators
}

input game_translations_filter {
    _and: [game_translations_filter]
    _or: [game_translations_filter]
    body: string_filter_operators
    body_html: string_filter_operators
    game_id: game_filter
    id: number_filter_operators
    languages_code: languages_filter
    tags: string_filter_operators
    tags_func: count_function_filter_operators
    thumbnail: string_filter_operators
    title: string_filter_operators
}

input languages_filter {
    _and: [languages_filter]
    _or: [languages_filter]
    body: string_filter_operators
    code: string_filter_operators
    direction: string_filter_operators
    name: string_filter_operators
    title: string_filter_operators
}

input number_filter_operators {
    _between: [GraphQLStringOrFloat]
    _eq: GraphQLStringOrFloat
    _gt: GraphQLStringOrFloat
    _gte: GraphQLStringOrFloat
    _in: [GraphQLStringOrFloat]
    _lt: GraphQLStringOrFloat
    _lte: GraphQLStringOrFloat
    _nbetween: [GraphQLStringOrFloat]
    _neq: GraphQLStringOrFloat
    _nin: [GraphQLStringOrFloat]
    _nnull: Boolean
    _null: Boolean
}

input page_filter {
    Name: string_filter_operators
    _and: [page_filter]
    _or: [page_filter]
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    id: number_filter_operators
    page_translations: page_translations_filter
    page_translations_func: count_function_filter_operators
    sort: number_filter_operators
    status: string_filter_operators
    user_created: string_filter_operators
    user_updated: string_filter_operators
}

input page_translations_filter {
    Title: string_filter_operators
    _and: [page_translations_filter]
    _or: [page_translations_filter]
    body: string_filter_operators
    header_image: string_filter_operators
    id: number_filter_operators
    languages_id: languages_filter
    page_id: page_filter
    slug: string_filter_operators
}

input string_filter_operators {
    _contains: String
    _empty: Boolean
    _ends_with: String
    _eq: String
    _icontains: String
    _in: [String]
    _ncontains: String
    _nempty: Boolean
    _nends_with: String
    _neq: String
    _nin: [String]
    _nnull: Boolean
    _nstarts_with: String
    _null: Boolean
    _starts_with: String
}
